version: 2
common: &common
  machine:
    docker_layer_caching: false 
  working_directory: ~/amazonlinux
  steps:
    - checkout
    - attach_workspace:
        at: ~/amazonlinux
    - run: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
    - run:
        name: create amazonlinux:gdal image
        command: docker build -f base/gdal${GDAL_VERSION}/Dockerfile -t remotepixel/amazonlinux:gdal${GDAL_VERSION} .
    - run:
        name: test GDAL 
        command: |
          docker run \
              --name lambda \
              --volume $(pwd)/:/local \
              --env GDALVERSION=${GDAL_VERSION} \
              -itd remotepixel/amazonlinux:gdal${GDAL_VERSION} bash
          test=$(docker exec -it lambda bash -c 'cd /local/tests && sh tests.sh')
          docker stop lambda
          docker rm lambda
          if [[ "$test" =~ "OK" ]]; then echo "PASSED"; else exit 1; fi
    - run:
        name: push image
        command: |
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              docker push remotepixel/amazonlinux:gdal${GDAL_VERSION}
            fi
    - run:
        name: create layers 
        command: |
          build-layer () {
              LAYER_NAME=$1
              echo "Building image with python ${PYTHON_VERSION}"
              docker build \
                --build-arg PYTHON_VERSION=${PYTHON_VERSION}\
                --build-arg GDAL_VERSION=${GDAL_VERSION} \
                -f layers/${LAYER_NAME}/Dockerfile \
                -t remotepixel/amazonlinux:gdal${GDAL_VERSION}-py${PYTHON_VERSION}-${LAYER_NAME} .
              
              echo "Creating aws lambda layer for python ${PYTHON_VERSION}"
              docker run \
                --name lambda \
                --volume $(pwd)/:/local \
                --env GDAL_VERSION=${GDAL_VERSION} \
                --env PYTHON_VERSION=${PYTHON_VERSION} \
                --env LAYER_NAME=${LAYER_NAME} \
                -itd remotepixel/amazonlinux:gdal${GDAL_VERSION}-py${PYTHON_VERSION}-${LAYER_NAME} bash
              docker cp ./scripts/create-lambda-layer.sh lambda:/tmp/create-lambda-layer.sh
              docker exec -it lambda bash -c '/tmp/create-lambda-layer.sh gdal${GDAL_VERSION}-py${PYTHON_VERSION}-${LAYER_NAME}'
              docker stop lambda
              docker rm lambda
          }

          test-layer () {
            echo "Test layer for python ${PYTHON_VERSION}"
            docker run \
                --name lambda \
                --volume $(pwd)/:/local \
                --env GDAL_DATA=/opt/share/gdal \
                --env PROJ_LIB=/opt/share/proj \
                --env GDAL_VERSION=${GDAL_VERSION} \
                --env PYTHON_VERSION=${PYTHON_VERSION} \
                --env PYTHONPATH=/opt/python:/var/runtime \
                -itd lambci/lambda:build-python${PYTHON_VERSION} bash
            docker cp ./layer-gdal${GDAL_VERSION}-py${PYTHON_VERSION}-geo.zip lambda:/tmp/layer.zip
            docker exec -it lambda bash -c 'unzip -q /tmp/layer.zip -d /opt/'
            driver=$(docker exec -it lambda python -c 'import rasterio; src = rasterio.open("https://oin-hotosm.s3.amazonaws.com/5ac626e091b5310010e0d482/0/5ac626e091b5310010e0d483.tif"); print(src.meta["driver"])')
            docker stop lambda
            docker rm lambda
            if [[ "$driver" =~ "GTiff" ]]; then echo "PASSED"; else exit 1; fi 
          }

          push-image () {
              IMAGE_NAME=$1
              docker push remotepixel/amazonlinux:gdal${GDAL_VERSION}-${IMAGE_NAME}
          }

          for PYTHON_VERSION in ${PYTHON_VERSIONS}; do
            docker build \
              --build-arg PYTHON_VERSION=${PYTHON_VERSION}\
              --build-arg GDAL_VERSION=${GDAL_VERSION} \
              -f base/python/Dockerfile \
              -t remotepixel/amazonlinux:gdal${GDAL_VERSION}-py${PYTHON_VERSION} .

            build-layer "geo"
            test-layer
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              push-image "py${PYTHON_VERSION}"
              push-image "py${PYTHON_VERSION}-geo"
            fi
          done

    - persist_to_workspace:
        root: .
        paths:
          - layer-gdal*.zip

jobs:
  "gdal-3.0":
    <<: *common
    environment:
      - GDAL_VERSION=3.0
      - PYTHON_VERSIONS=3.7
  "gdal-2.4":
    <<: *common
    environment:
      - GDAL_VERSION=2.4
      - PYTHON_VERSIONS=3.7
  "deploy":
    docker:
      - image: circleci/python:3.7.2
        environment:
          - GDAL_VERSIONS=2.4 3.0
          - PYTHON_VERSIONS=3.7
    working_directory: ~/amazonlinux
    steps:
      - checkout
      - attach_workspace:
          at: ~/amazonlinux
      - run:
          name: install cmd
          command: |
            sudo apt-get install jq
            sudo pip install awscli
      - run:
          name: Deploy Layer
          command: |
            for GDAL_VERSION in ${GDAL_VERSIONS}; do
              for PYTHON_VERSION in ${PYTHON_VERSIONS}; do
                ./scripts/deploy-layer.sh "geo" $GDAL_VERSION $PYTHON_VERSION
              done
            done

workflows:
  version: 2
  build_and_push:
    jobs:
      - "gdal-3.0"
      - "gdal-2.4"
      - deploy:
          requires:
            - "gdal-3.0"
            - "gdal-2.4"
          filters:
            branches:
              only:
                - master
